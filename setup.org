





* Packages
** Window
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)

  (line-number-mode 1)

  (show-paren-mode 1)


  (global-set-key (kbd "C-c p") 
		  (lambda() (interactive)
		    (org-babel-load-file "~/.emacs.d/init.org")))

  (setq scroll-conservatively 100)
  ;;;;;; WINDOW
  (when window-system
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1))

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq frame-title-format "TimeLines")
  ;; Cursor settings
  (blink-cursor-mode 0)
  (set-default 'cursor-type 'box)

  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
  (setq ring-bell-function 'ignore)

  (global-set-key "\M-g" 'goto-line)


  (use-package monokai-theme)
  (set-cursor-color "#ff1493")
#+END_SRC
** Packages
*** Org
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	  '("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))



  (setq org-hide-leading-stars t)
  (setq org-alphabetical-lists t)
  (setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
  (setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
  (setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
  (setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html
#+END_SRC
*** Code
#+BEGIN_SRC emacs-lisp
   (use-package haskell-mode)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
   (use-package paredit)

   (use-package magit)
   (use-package ghc)

   (use-package intero
     :config
     (intero-global-mode 1))
#+END_SRC
*** Navigation
**** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config (smartparens-global-mode 1))




#+END_SRC
**** Ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :config (ido-mode 1)
	    (setq ido-enable-flex-matching nil)
	    (setq ido-create-new-buffer 'always)
	    (setq ido-everywhere t)
	    (ido-mode 1))

  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode 1))

#+END_SRC
**** Hydra
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-q"))

  (use-package hydra)
  ;;(hydra-create "C-q"
  ;;          '(("i" 'previous-line)
  ;;            ("l" 'right-char)
  ;;            ("k" 'next-line)
  ;;            ("j" 'left-char)))
  ;; When C-q-(any of the following) is pressed, the letter navigation mode is enabled until another command is executed
  ;; (C-q doesn't have to remain pressed after the first toggle)
  (defhydra hydra-move (global-map "C-q")
    "move"
    ("c" previous-line)
    ("t" next-line)
    ("h" left-char)
    ("n" right-char))

#+END_SRC
**** Ace-Window
#+BEGIN_SRC emacs-lisp

  (use-package org)
  (use-package avy
    :bind ("M-s" . avy-goto-char))
  (use-package smex
    :init (smex-initialize)
    :bind
    ("M-x" . smex))

  (use-package rainbow-mode
    :config (rainbow-mode 1))


  (use-package company)
  (use-package try)
  (use-package ace-window)


  ;;(use-package intero)
  ;;(add-hook 'haskell-mode-hook 'intero-mode)


  ;; Same thing but with smartrep instead, in this case C-q has to remain pressedc;(use-package smartrep)
  ;;(smartrep-define-key
    ;;  global-map "C-q" '(("i" . 'previous-line)
      ;;                   ("l" . 'right-char)
	;;                 ("k" . 'next-line)
	  ;;               ("j" . ')))
  ;;avy mode, swipper



#+END_SRC

**** which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC

**** Avy-Jump
#+BEGIN_SRC emacs-lisp
  (use-package avy)

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
    
#+END_SRC

* Config
** Letter navigation
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-i"))
  (global-unset-key (kbd "C-j"))
  (global-unset-key (kbd "C-k"))
  (global-unset-key (kbd "C-l"))


  (global-unset-key (kbd "C-e"))
  (global-unset-key (kbd "C-a"))
  (global-set-key (kbd "C-u") 'beginning-of-line)
  (global-set-key (kbd "C-o") 'end-of-line)

  (global-set-key (kbd "C-i") 'previous-line)
  (global-set-key (kbd "C-j") 'left-char)
  (global-set-key (kbd "C-k") 'next-line)
  (global-set-key (kbd "C-l") 'right-char)

  (global-set-key (kbd "C-M-w") 'kill-region)

  (global-unset-key (kbd "C-y"))
  (global-unset-key (kbd "M-e"))
  (global-set-key (kbd "M-e") 'yank)

  (global-unset-key (kbd "C-M-q"))
  (global-set-key (kbd "C-M-q") 'kill-line)

#+END_SRC
** QWERTY -> Dvorak
#+BEGIN_SRC emacs-lisp


   ;;;;;; QWERTY -> DVORAK while keeping all keybindngs the same
   ;; First row
   (define-key key-translation-map (kbd "q") (kbd "'"))
   (define-key key-translation-map (kbd "w") (kbd ","))
   (define-key key-translation-map (kbd "e") (kbd "."))
   (define-key key-translation-map (kbd "r") (kbd "p"))
   (define-key key-translation-map (kbd "t") (kbd "y"))
   (define-key key-translation-map (kbd "y") (kbd "f"))
   (define-key key-translation-map (kbd "u") (kbd "g"))
   (define-key key-translation-map (kbd "i") (kbd "c"))
   (define-key key-translation-map (kbd "o") (kbd "r"))
   (define-key key-translation-map (kbd "p") (kbd "l"))
   (define-key key-translation-map (kbd "[") (kbd "/"))
   (define-key key-translation-map (kbd "]") (kbd "="))

   (define-key key-translation-map (kbd "Q") (kbd "\""))
   (define-key key-translation-map (kbd "W") (kbd "<"))
   (define-key key-translation-map (kbd "E") (kbd ">"))
   (define-key key-translation-map (kbd "R") (kbd "P"))
   (define-key key-translation-map (kbd "T") (kbd "Y"))
   (define-key key-translation-map (kbd "Y") (kbd "F"))
   (define-key key-translation-map (kbd "U") (kbd "G"))
   (define-key key-translation-map (kbd "I") (kbd "C"))
   (define-key key-translation-map (kbd "O") (kbd "R"))
   (define-key key-translation-map (kbd "P") (kbd "L"))
   (define-key key-translation-map (kbd "{") (kbd "?"))
   (define-key key-translation-map (kbd "}") (kbd "+"))

   ;; Second row
   (define-key key-translation-map (kbd "a") (kbd "a"))
   (define-key key-translation-map (kbd "s") (kbd "o"))
   (define-key key-translation-map (kbd "d") (kbd "e"))
   (define-key key-translation-map (kbd "f") (kbd "u"))
   (define-key key-translation-map (kbd "g") (kbd "i"))
   (define-key key-translation-map (kbd "h") (kbd "d"))
   (define-key key-translation-map (kbd "j") (kbd "h"))
   (define-key key-translation-map (kbd "k") (kbd "t"))
   (define-key key-translation-map (kbd "l") (kbd "n"))
   (define-key key-translation-map (kbd ";") (kbd "s"))
   (define-key key-translation-map (kbd "'") (kbd "-"))

   (define-key key-translation-map (kbd "A") (kbd "A"))
   (define-key key-translation-map (kbd "S") (kbd "O"))
   (define-key key-translation-map (kbd "D") (kbd "E"))
   (define-key key-translation-map (kbd "F") (kbd "U"))
   (define-key key-translation-map (kbd "G") (kbd "I"))
   (define-key key-translation-map (kbd "H") (kbd "D"))
   (define-key key-translation-map (kbd "J") (kbd "H"))
   (define-key key-translation-map (kbd "K") (kbd "T"))
   (define-key key-translation-map (kbd "L") (kbd "N"))
   (define-key key-translation-map (kbd ":") (kbd "S"))
   (define-key key-translation-map (kbd "\"") (kbd "_"))

   ;; Third row
   (define-key key-translation-map (kbd "z") (kbd ";"))
   (define-key key-translation-map (kbd "x") (kbd "q"))
   (define-key key-translation-map (kbd "c") (kbd "j"))
   (define-key key-translation-map (kbd "v") (kbd "k"))
   (define-key key-translation-map (kbd "b") (kbd "x"))
   (define-key key-translation-map (kbd "n") (kbd "b"))
   (define-key key-translation-map (kbd "m") (kbd "m"))
   (define-key key-translation-map (kbd ",") (kbd "w"))
   (define-key key-translation-map (kbd ".") (kbd "v"))
   (define-key key-translation-map (kbd "/") (kbd "z"))

   (define-key key-translation-map (kbd "Z") (kbd ":"))
   (define-key key-translation-map (kbd "X") (kbd "Q"))
   (define-key key-translation-map (kbd "C") (kbd "J"))
   (define-key key-translation-map (kbd "V") (kbd "K"))
   (define-key key-translation-map (kbd "B") (kbd "X"))
   (define-key key-translation-map (kbd "N") (kbd "B"))
   (define-key key-translation-map (kbd "M") (kbd "M"))
   (define-key key-translation-map (kbd "<") (kbd "W"))
   (define-key key-translation-map (kbd ">") (kbd "V"))
   (define-key key-translation-map (kbd "?") (kbd "Z"))


   ;; Misc
   (define-key key-translation-map (kbd "-") (kbd "["))
   (define-key key-translation-map (kbd "=") (kbd "]"))

   (define-key key-translation-map (kbd "_") (kbd "{"))
   (define-key key-translation-map (kbd "+") (kbd "}"))

#+END_SRC
